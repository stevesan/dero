
DOORS:
    how to make a door?
    doom spec line 1078
    linedef function
    S1
    T trigger model
    rightside of line
    11 == level exit

GENERAL GEOMETRY GEN:

    ok, we have the high level gen algo, with a tree of generators...but what about the geo? 
    the two-heightmaps approach? but want smooth diagonal lines
    we can probably figure out a way to smooth out the diags, and just keep the grid pretty high res.

    the 2-heights abstraction is nice, as it makes space-creation algos pretty easy to think about
    ie. distance field type ideas.

----------------------------------------
----------------------------------------
----------------------------------------

a list of spaces. each space has:
    region of grid
    entrance doors
    exit doors
    each door:
        tag if locked

issues with needy squidi algo:
    can often see key before seeing door.
    ok, just gonna be OK with this for now.



ok handle multiple heights...?

wall could be:
    1) finite area, no sector. for border
    2) a single impassible linedef. good for gates
    3) finite area, has sector that is too tall/low to pass. for windows.

ok i guess we do need to support all 3 cases...

1 naturally works, with is_unreachable
2 is default, 3 doesn't work yet.

seems like #2 should be the more rare case. like, explicity specify when you want these kind of walls. or jsut do it after the fact.
should make the grid part have walls with area. ie two zones should not actually touch on the grid
the super sampling is ok..but in general, i don't think we necessarily need to take that approach.
i think the coarse-grid should serve as a logical grid, and should perhaps impose some critical path logic to guide the generators.

critical path inside each zone. pick a "hub" spot, compute shortest path from each door to it, ensure that path is never blocked by per-zone algo
    we can use PoE's perlin noise weighting to make crit paths more wiggly.

addressing blockiness: we don't need to always use the zone grid to generate geometry. we only need to respect the boundaries it imposes. for example, we can do simplification, but still respect the boundaries and the critical paths.

zone grid: stores info about zone boundaries and critical paths. general rule: you are not allowed to go outside your zone cells, and you're not allowed to go into the crit path by more than 1 cell.

zone grid is the coarse grid, before the super-sampling/separation we do now. separation is a valid op.

now we need to think about...how would we actually generate stuff in a free form manner? randomly placing items, decorations, etc.

OBSERVATION: lower res initial grid results in more snaking zones. i guess finer blob spreading just results in pretty circular blobs..
    ok this isn't necessarily something to worry about. the snaking-feeling should come from the zone-gen themselves.

i tried the separation algorithm running on the non-zone-collated space tree. much more complex looking results
get door side textures to stop scrolling?
    done with Lower Unpegged on adjacent linedefs
sometimes doors don't open from a side. make sure all two-sided LDs are set to function 31
    must be right side!
door sectors next to another is not good. need to do the 3x1 separation
doors only rise up to neighboring heights or something. definitely need to isolate areas around them.
get Box2D for python!
    meh fuck it for now
actually, using box2D may be overkill for the 'manmade' style. something much more procedural may be preferable. ie. generate a sequence of symmetric pieces in a tree order.
    the shape-gen could be tunnel-like, symmetric piece, non-symmetric, etc.

critical path
finer voxel grid for geometric detailing
geo simplification

we can have various algorithms for filling space:
- seed spread - 'shape grow' method
    currently implemented as method2.
- 'pile of pieces' shape-then-fit method.
    ues box2D

how can we get the tree for the shape-then-fit method?

ACCESS GRID
    1 cell == player fits.
    2 nboring free cells == player can move freely between both
SPACE GRAPH
    lock-key puzzles
VOXEL-GRID
    much finer grained grid for actually synthesizing the map
MAP
    the final DOOM geometry. linedefs, etc.
seeing key before door happens A LOT
    mine minimaps to show keys and doors!

color doors in wad dumps

the fill-path paradigm:
    shape algos can do whatever they want, but later on, the "tunneling algo" will use weighted-A-star to ensure paths.
    AND, shape algos can define weights! ex. if you build a room with four walls and four POSSIBLE entrances, you should make the entrance voxels (1 per wall) have small weight compared to the rest of the wall voxels, so the pathing algo will be very likely to break one of those voxels.
create some interesting fill algos!
    symmetic spread
should make everything soft except the walls aroudn the area, and then in those walls, poke soft holes
connecting zones: do not be bound to the pre-defined doors!
in the zone-step, it should just define which zones are adjacent, not how to get to them.
clear_paths should be responsible for the exact paths.
tunnels too long
    need to fit shapes together, rather than innital region-spread method
area shapes too concave
SHAPE GEN: need shape generator with continuous parameters:
    convexity
    symmetry
        how many folds?
        continuous value.. if 0 to 1, copy along one axis, with some probability of actually respecting the copy.

ALWAYS REMEMBER: it's not just about what's "possible" it's about controlling the *distribution*
    random blobs make anything like this possible, but not necessarily likely.

regular n-gons have n axis of symmetry

partial symmetry:
    
symmetry def:
N = number of fills
count how many fills do not have reflected pairs

think: maybe we need another parameter, to control how many "holes" show up.
    i feel like finite convexity should result in "dents" but not in "holes"
    specifically, dents are free cells that can reach the convex hull
    and holes cannot.
    so maybe convexity should only control the 'dents', and another parameter should control holes.
    TEMP: for now, just removing ALL holes completely.
need another knob: boxiness. definitely, a good amount of shapes in levels are box-like
    this is easy. just compute bounding box and treat like convexity enforcement.
ok enforcing convexity is good...but it still kinda sucks.
we want our concavity, if any, to be smooth.
what if we took a frequency space approach?
or maybe simpler..do a "wall smoothing" step?
we could run some kind of...median-like filter thing over it all.
    write now i'm just doing min-nbor-count. works well enough.
----------------------------------------

aspect ratios:
    don't quite like randomizing aspect ratio to vary how thin/flat shapes are.
    would be better to control the spread algo to favor one or the other during its next-spread sampling

non-full symmetry looks pretty bad. we really want the non-symmetric parts clustered.
    like a single semi-circle sticking out one side or something. not some random unmatched cells scattered around the border.
    could we accomplish this by clustering..like, when increasing symmetry, choose an 'anchor' point, and spread points prioritized by dist-to-anchor?

    hmm..or maybe cells are too fine of a medium to do this kind of shape creation...

quick: diagonal symmetry

can also just create some "wormy" spaces by directly spread-filling unused space after shape-overlap resolve.

another observation: we don't need to strictly enforce all these metrics. we could just sometimes be OK with one of them not being met.
    it's really about what we're trying to achieve, rather than what is actually achieved. art does not need to be perfect.

concerning our puzzle designer: it doesn't really provide "loops". we should allow cycles, and thus loops, for key-finding treks.

zone shapes:
    we could combine our shape gen with spreading... first gen shapes, then shove them together, then choose half the shapes to 'spread' some amount.
    this results in 'tight packing' while the ones that aren't spread get some non-symmetry and non-convexity that isn't totally random either (cuz they're shaped by their context)
    this 'fill spread' can be symmetric too

---------
20222
---------

generating polygons is cool, but they should not necessarily be generated in isolation and then just slapped together in a later pass. there are clearly features of rooms that result from adjacency. for example, in the left end of e1m1, the indent into the bigger space is clearly because of the stair-room going into it.

is this approach of "minimap first" design not the right approach, then? clearly, a lot of the shapes are BECAUSE of design considerations.

maybe it'd be better to mirror the design process a human would go through rather than trying to create the generator from the mini-map perspective. afterall, these subtle decisions were made after playtesting. maybe i should first design e1m1 myself? what process would a designer go through? probably you think a lot of what the player sees, etc.

maybe we should start with a set of overlapping boxes..like a designer may start with a grey boxed layout..
i'm sure different levels were built with different processes. there's no "best way" to write a song, for example. so let's just choose one and see where we end up.

INSIGHT: spaces are awesome when you perceive their form AND FUNCTION. a form without function is a sculpture. they're useful, but most cool DOOM rooms are not just a room with a sculpture. for example, the E1M1 west room is a stair case LEADING UP to the view. the imp room is meant to intro the imps and has a tight-rope mechanic. the E1M1 intro pool highlights the view again. the next room has a box in the middle that highlights the two grunts.

so when generating a room, we should make sure the form is tighlty coupled with its function. if the E1M1 west room just had a stair case in the middle, that'd be lame. it'd be easy to "see the algorithm". "oh, they're just placing completely random shit in the middle of rooms." the key phrase here is "completely random". it implies "no purpose." no function.

then what functions can a room and its design serve? let's see:
  - present 1 or more exits to other rooms. this is the most basic, universal function.
      this gets more interesting when rooms are different, such as height change (stairs, ramps), type change (indoor to outdoor), theme change (tech to hell), etc.
  - present a view. ex: e1m1 pool room, west room.
      vision is very important in level design. horse-shoe. "see that mountain? you can go there"
  - house a combat scenario. the imp-lava space, the box-of-demons space
  - present loot. act as a pedestal.
  - show off tech, art
      stairs to show DOOM's height tech
  - induce emotion (e.g. scare the player) 
  - fit within a prescribed space. "i need a tunnel from A to B, but there's not much space left between all my existing rooms.."
        

if you can design a room with 1 "set piece" that covers all its functions, that is THE BEST. this is not strictly necessary, of course. the box only serves to present the grunts, the pool only presents the view. the lava bridge is a good example of multi-function: 1) tricky combat scenario with imps throwing fireballs at you while you try to not fall into lava, and 2) connecting the entrance to the exit. the west room stair case also does: 1) presents the view, 2) holds the armor loot, 3) shows off verticality.

given all this, just generating shapes is not that interesting. and this is probably a well-studied problem. instead, we need to generate with function in mind..
  - generate a tunnel from A to B. we did this with that jsfiddle! it was one of the more successful mini-experiments.
  - generate e1m1 west room: elevation change with a view, a "pedestal", and some combat interest (the pillars).

--- i think i ultimately need to understand how doom maps are made. why certain decisions are made regarding the geometry.

the idea of a "beat graph" is interesting..

symmetries of e1m1..interesting that you start with a view that is not horizontally symmetric. encourages you to explore around to find the symmetry? if there are two pillars, you'll want to stand between them.

overlapping shapes..define regions...randomly connect them..define relationships between adjacent parts..
constraints:
- fit into existing space (
- some level of symmetry
- shape variety (e1m1 computer room is all AA rects)

start room:
  the pool is east-west symmetric, creating a flow from the courtyard view to the armor room.

armor room:
  stairs going up to a view and pedestal

computer room:
  the leanto faces the entry, so the player immediately sees the two grunts.

imp cave:
  this room has very specific, intentional gameplay purposes.

romero's horseshoe: https://www.youtube.com/watch?v=rV6HlBa88js&t=17s
the loop is probably a better description: https://developer.valvesoftware.com/wiki/Loops_(level_design)

how can two spaces be connected?
- nothing - one directly leads into another
- door
- gate (door but can see other side)
- tunnel
- outdoors, maybe a road
- bridge (over separating river, over chasm)
- higher level: one space can contain the other space, maybe with visibility. a "cage"

can we create an abstract language to describe these features? like how would you define a moat in an abstract way? probably with a graph!

TODO: download my stealth game builder game.
https://steamcommunity.com/sharedfiles/filedetails/?id=1839599631&searchtext=gear

possible shape gen algo, inspired by stealth game:
- drop shapes, with random overlap behavior:
  overwrite
  space-union: union spaces, but all walls removed
  intersect: do nothing - walls stay

